var welcomeHtml = require('cloud/email-welcome.js');var usersNudgeHtml = require('cloud/email-user-profile-nudge.js');var Mailgun = require('mailgun');var Moment = require('moment');/** * Handle the after save for user. Namely, when the user first create an account * We send him/her a welcome email. */Parse.Cloud.afterSave("Users", function(request) {    if(!(request.object.existed())){        var email = getUserEmail(request.object);        var sendTime = Moment().unix() + 300;        Mailgun.initialize('getmagpie.com', 'key-29a34dfd9d1f65049b8e05e03ff3214b');        Mailgun.sendEmail({            to: email,            from: "Magpie" + "<support@getmagpie.com>",            subject: "Welcome to Magpie",            html: welcomeHtml.getWelcomeEmailHtml(request.object),            "o:deliverytime":sendTime        }, {            success: function(httpResponse) {                console.log(httpResponse);            },            error: function(httpResponse) {                console.error(httpResponse);            }        });    }});/** * Get the user email * @param userObj * @returns {*} */function getUserEmail(userObj) {    return userObj.get("email");}/** * Cloud job that run every 8 hours to check if user has */Parse.Cloud.job("sendEmailUserProfileNudgeTest", function(request, status) {    //var lowerTime = Moment().subtract(36, "hours");    //var upperTime = Moment().subtract(12, "hours");    Parse.Cloud.useMasterKey();    var User = Parse.Object.extend("Users");    var query = new Parse.Query(User);    query.equalTo("email", "minhthaodangnguyen@gmail.com");    //query.greaterThanOrEqualTo("createdAt", lowerTime);    //query.lessThan("createdAt", upperTime);    //query.exist("email");    query.limit(1000);    query.find({        success:function(results) {            if (results.length > 0) {                usersNudgeHtml.sendUserProfileNudgeEmail(results, status);            } else {                status.success("No new users");            }        },        error:function(error) {            status.error("Error: " +  error.message);        }    });});/** * Cloud job that run every 8 hours to check if user has */Parse.Cloud.job("sendEmailUserProfileNudge", function(request, status) {    var lowerTime = Moment().subtract(36, "hours");    var upperTime = Moment().subtract(12, "hours");    Parse.Cloud.useMasterKey();    var User = Parse.Object.extend("Users");    var query = new Parse.Query(User);    query.greaterThanOrEqualTo("createdAt", lowerTime);    query.lessThan("createdAt", upperTime);    query.exists("email");    query.limit(1000);    query.find({        success:function(results) {            if (results.length > 0) {                usersNudgeHtml.sendUserProfileNudgeEmail(results, status);            } else {                status.success("No new users");            }        },        error:function(error) {            status.error("Error: " +  error.message);        }    });});/** * Here is the code that used as the backend when scraped airbnb data only *///add airbnb user to the databaseParse.Cloud.define("addAirBnbUser", function(request, response) {    Parse.Cloud.useMasterKey();    var User = Parse.Object.extend("Users");        var query = new Parse.Query(User);    query.equalTo("airbnbUid", request.params.airbnbUid);    query.find({        success:function(results) {            if (results.length > 0) {                response.success("AirBnb user already exist")            } else {                var airbnbUser = new User();                airbnbUser.set("airbnbUid", request.params.airbnbUid);                airbnbUser.set("username", request.params.username);                airbnbUser.set("profilePic", request.params.profilePic);                airbnbUser.set("location", request.params.location);                airbnbUser.set("description", request.params.description);                airbnbUser.set("school", request.params.school);                airbnbUser.set("occupation", request.params.occupation);                airbnbUser.set("language", request.params.language);                            airbnbUser.save(null, {                    success:function() {                       response.success("AirBnb user added");                    },                    error:function(error) {                       response.error("Error adding AirBnb user. Error: " + error.message);                    }                });            }        },        error:function(error) {            response.error("Error prepare adding AirBnb user. Error: " + error.message);        }    });});//Cloud job function that will help change all instant of airbnb to MagpieParse.Cloud.job("changeAirbnbToMagpie", function (request, status) {    Parse.Cloud.useMasterKey();    changeAirbnbToMagpiePage(request.params.page, status);});function changeAirbnbToMagpiePage(page, status) {    var User = Parse.Object.extend("Users");    var query = new Parse.Query(User);    query.descending("objectId");    query.limit(500);    query.skip(500 * page);    query.find ({        success:function(results) {            if (results.length > 0) {                for (var j = 0; j < results.length; j++) {                    var user = results[j];                    var userDescription = user.get("description");                    if (userDescription != undefined) {                        var updatedDescription = userDescription.replace(/airbnb/gi, "Magpie");                        user.set("description", updatedDescription);                    }                }                Parse.Object.saveAll(results, {                    success: function() {                        status.success("finish updated Airbnb to Magpie");                    },                    error: function(error) {                        status.error("fail to update Airbnb to Magpie, Error: " + error.message);                    }                });            }        },        error:function() {            status.error("Error change Airbnb to Magpie");        }    });}